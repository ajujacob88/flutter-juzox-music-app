plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

android {
    namespace "com.example.juzox_music_app"
  
    compileSdk flutter.compileSdkVersion  //automatically set by flutter which will be the latest,, no need to setup explicitly, in my case it will be 34,,In a Flutter project, the compileSdkVersion is managed by the Flutter framework itself and is not explicitly set in your project's build.gradle file. Instead, Flutter uses its own SDK version, which is determined by the Flutter SDK you have installed. In a Flutter project, you can check the current compileSdkVersion indirectly by checking the corresponding Android SDK version used by Flutter. Flutter uses the Android SDK internally for compiling Android apps, so the Android SDK version used by Flutter is equivalent to the compileSdkVersion for your project.To check the Android SDK version used by Flutter, you can run the following command in your terminal: flutter doctor -v
 
   // compileSdkVersion 34 
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.juzox_music_app"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.

        //minSdkVersion 22 //if this is greater than 21, then multidexenabled will be automatically true - aju
        //targetSdkVersion 33
        minSdkVersion flutter.minSdkVersion    //but in my project it is 19 which is kitkat(i think it is set using android studio in my case), so multidexenabled need to enabled true, update it into 22 for next project onwards
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {
     implementation 'androidx.multidex:multidex:2.0.1'
}
